using System;
using Abstractions.Visitors.Interfaces;
using Abstractions.Visitors.FactoryMethods;

namespace Abstractions.Visitors.Extensions
{
    public static class InterfaceExtensions
    {
        #region T = 1
        public static void Accept<T1>(this IVisitable<T1> visitable, Action<T1> t1Action) => visitable.Accept(Visitor<T1>.Create(t1Action));
        public static TReturn Accept<T1, TReturn>(this IVisitable<T1> visitable, Func<T1, TReturn> t1Func) => visitable.Accept(Visitor<T1>.Create(t1Func));
        public static TReturn Accept<T1, T2, TReturn>(this IVisitable<T1> visitable, I1x1Visitor<T1, T2, TReturn> visitor, IVisitable<T2> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, TReturn>(this IVisitable<T1> visitable, I1x2Visitor<T1, T2, T3, TReturn> visitor, IVisitable<T2, T3> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, TReturn>(this IVisitable<T1> visitable, I1x3Visitor<T1, T2, T3, T4, TReturn> visitor, IVisitable<T2, T3, T4> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, TReturn>(this IVisitable<T1> visitable, I1x4Visitor<T1, T2, T3, T4, T5, TReturn> visitor, IVisitable<T2, T3, T4, T5> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, TReturn>(this IVisitable<T1> visitable, I1x5Visitor<T1, T2, T3, T4, T5, T6, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, TReturn>(this IVisitable<T1> visitable, I1x6Visitor<T1, T2, T3, T4, T5, T6, T7, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(this IVisitable<T1> visitable, I1x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1> visitable, I1x8Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8, T9> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1> visitable, I1x9Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8, T9, T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1> visitable, I1x10Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1> visitable, I1x11Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1> visitable, I1x12Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1> visitable, I1x13Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1> visitable, I1x14Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1> visitable, I1x15Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 2
        public static void Accept<T1, T2>(this IVisitable<T1, T2> visitable, Action<T1> t1Action, Action<T2> t2Action) => visitable.Accept(Visitor<T1, T2>.Create(t1Action, t2Action));
        public static TReturn Accept<T1, T2, TReturn>(this IVisitable<T1, T2> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func) => visitable.Accept(Visitor<T1, T2>.Create(t1Func, t2Func));
        public static TReturn Accept<T1, T2, T3, TReturn>(this IVisitable<T1, T2> visitable, I2x1Visitor<T1, T2, T3, TReturn> visitor, IVisitable<T3> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, TReturn>(this IVisitable<T1, T2> visitable, I2x2Visitor<T1, T2, T3, T4, TReturn> visitor, IVisitable<T3, T4> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, TReturn>(this IVisitable<T1, T2> visitable, I2x3Visitor<T1, T2, T3, T4, T5, TReturn> visitor, IVisitable<T3, T4, T5> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, TReturn>(this IVisitable<T1, T2> visitable, I2x4Visitor<T1, T2, T3, T4, T5, T6, TReturn> visitor, IVisitable<T3, T4, T5, T6> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, TReturn>(this IVisitable<T1, T2> visitable, I2x5Visitor<T1, T2, T3, T4, T5, T6, T7, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(this IVisitable<T1, T2> visitable, I2x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1, T2> visitable, I2x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8, T9> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2> visitable, I2x8Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8, T9, T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2> visitable, I2x9Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8, T9, T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2> visitable, I2x10Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2> visitable, I2x11Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2> visitable, I2x12Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2> visitable, I2x13Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2> visitable, I2x14Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 3
        public static void Accept<T1, T2, T3>(this IVisitable<T1, T2, T3> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action) => visitable.Accept(Visitor<T1, T2, T3>.Create(t1Action, t2Action, t3Action));
        public static TReturn Accept<T1, T2, T3, TReturn>(this IVisitable<T1, T2, T3> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func) => visitable.Accept(Visitor<T1, T2, T3>.Create(t1Func, t2Func, t3Func));
        public static TReturn Accept<T1, T2, T3, T4, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x1Visitor<T1, T2, T3, T4, TReturn> visitor, IVisitable<T4> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x2Visitor<T1, T2, T3, T4, T5, TReturn> visitor, IVisitable<T4, T5> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x3Visitor<T1, T2, T3, T4, T5, T6, TReturn> visitor, IVisitable<T4, T5, T6> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x4Visitor<T1, T2, T3, T4, T5, T6, T7, TReturn> visitor, IVisitable<T4, T5, T6, T7> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8, T9> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8, T9, T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x8Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8, T9, T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x9Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8, T9, T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x10Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x11Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x12Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3> visitable, I3x13Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 4
        public static void Accept<T1, T2, T3, T4>(this IVisitable<T1, T2, T3, T4> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action) => visitable.Accept(Visitor<T1, T2, T3, T4>.Create(t1Action, t2Action, t3Action, t4Action));
        public static TReturn Accept<T1, T2, T3, T4, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func) => visitable.Accept(Visitor<T1, T2, T3, T4>.Create(t1Func, t2Func, t3Func, t4Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x1Visitor<T1, T2, T3, T4, T5, TReturn> visitor, IVisitable<T5> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x2Visitor<T1, T2, T3, T4, T5, T6, TReturn> visitor, IVisitable<T5, T6> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x3Visitor<T1, T2, T3, T4, T5, T6, T7, TReturn> visitor, IVisitable<T5, T6, T7> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> visitor, IVisitable<T5, T6, T7, T8> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> visitor, IVisitable<T5, T6, T7, T8, T9> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T5, T6, T7, T8, T9, T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T5, T6, T7, T8, T9, T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x8Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T5, T6, T7, T8, T9, T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x9Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T5, T6, T7, T8, T9, T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x10Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x11Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4> visitable, I4x12Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 5
        public static void Accept<T1, T2, T3, T4, T5>(this IVisitable<T1, T2, T3, T4, T5> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5>.Create(t1Action, t2Action, t3Action, t4Action, t5Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5>.Create(t1Func, t2Func, t3Func, t4Func, t5Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x1Visitor<T1, T2, T3, T4, T5, T6, TReturn> visitor, IVisitable<T6> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x2Visitor<T1, T2, T3, T4, T5, T6, T7, TReturn> visitor, IVisitable<T6, T7> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> visitor, IVisitable<T6, T7, T8> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> visitor, IVisitable<T6, T7, T8, T9> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T6, T7, T8, T9, T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T6, T7, T8, T9, T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T6, T7, T8, T9, T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x8Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T6, T7, T8, T9, T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x9Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T6, T7, T8, T9, T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x10Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5> visitable, I5x11Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 6
        public static void Accept<T1, T2, T3, T4, T5, T6>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x1Visitor<T1, T2, T3, T4, T5, T6, T7, TReturn> visitor, IVisitable<T7> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> visitor, IVisitable<T7, T8> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> visitor, IVisitable<T7, T8, T9> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T7, T8, T9, T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T7, T8, T9, T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T7, T8, T9, T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T7, T8, T9, T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x8Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T7, T8, T9, T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x9Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T7, T8, T9, T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6> visitable, I6x10Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 7
        public static void Accept<T1, T2, T3, T4, T5, T6, T7>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> visitor, IVisitable<T8> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> visitor, IVisitable<T8, T9> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T8, T9, T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T8, T9, T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T8, T9, T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T8, T9, T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T8, T9, T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x8Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T8, T9, T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7> visitable, I7x9Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T8, T9, T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 8
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, I8x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> visitor, IVisitable<T9> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, I8x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T9, T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, I8x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T9, T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, I8x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T9, T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, I8x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T9, T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, I8x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T9, T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, I8x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T9, T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8> visitable, I8x8Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T9, T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 9
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action, Action<T9> t9Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action, t9Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func, Func<T9, TReturn> t9Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func, t9Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, I9x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> visitor, IVisitable<T10> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, I9x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T10, T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, I9x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T10, T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, I9x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T10, T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, I9x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T10, T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, I9x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T10, T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9> visitable, I9x7Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T10, T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 10
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action, Action<T9> t9Action, Action<T10> t10Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action, t9Action, t10Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func, Func<T9, TReturn> t9Func, Func<T10, TReturn> t10Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func, t9Func, t10Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> visitable, I10x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> visitor, IVisitable<T11> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> visitable, I10x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T11, T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> visitable, I10x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T11, T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> visitable, I10x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T11, T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> visitable, I10x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T11, T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> visitable, I10x6Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T11, T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 11
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action, Action<T9> t9Action, Action<T10> t10Action, Action<T11> t11Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action, t9Action, t10Action, t11Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func, Func<T9, TReturn> t9Func, Func<T10, TReturn> t10Func, Func<T11, TReturn> t11Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func, t9Func, t10Func, t11Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> visitable, I11x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> visitor, IVisitable<T12> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> visitable, I11x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T12, T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> visitable, I11x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T12, T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> visitable, I11x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T12, T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> visitable, I11x5Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T12, T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 12
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action, Action<T9> t9Action, Action<T10> t10Action, Action<T11> t11Action, Action<T12> t12Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action, t9Action, t10Action, t11Action, t12Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func, Func<T9, TReturn> t9Func, Func<T10, TReturn> t10Func, Func<T11, TReturn> t11Func, Func<T12, TReturn> t12Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func, t9Func, t10Func, t11Func, t12Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> visitable, I12x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> visitor, IVisitable<T13> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> visitable, I12x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T13, T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> visitable, I12x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T13, T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> visitable, I12x4Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T13, T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 13
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action, Action<T9> t9Action, Action<T10> t10Action, Action<T11> t11Action, Action<T12> t12Action, Action<T13> t13Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action, t9Action, t10Action, t11Action, t12Action, t13Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func, Func<T9, TReturn> t9Func, Func<T10, TReturn> t10Func, Func<T11, TReturn> t11Func, Func<T12, TReturn> t12Func, Func<T13, TReturn> t13Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func, t9Func, t10Func, t11Func, t12Func, t13Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> visitable, I13x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> visitor, IVisitable<T14> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> visitable, I13x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T14, T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> visitable, I13x3Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T14, T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 14
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action, Action<T9> t9Action, Action<T10> t10Action, Action<T11> t11Action, Action<T12> t12Action, Action<T13> t13Action, Action<T14> t14Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action, t9Action, t10Action, t11Action, t12Action, t13Action, t14Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func, Func<T9, TReturn> t9Func, Func<T10, TReturn> t10Func, Func<T11, TReturn> t11Func, Func<T12, TReturn> t12Func, Func<T13, TReturn> t13Func, Func<T14, TReturn> t14Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func, t9Func, t10Func, t11Func, t12Func, t13Func, t14Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> visitable, I14x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> visitor, IVisitable<T15> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> visitable, I14x2Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T15, T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)), outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 15
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action, Action<T9> t9Action, Action<T10> t10Action, Action<T11> t11Action, Action<T12> t12Action, Action<T13> t13Action, Action<T14> t14Action, Action<T15> t15Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action, t9Action, t10Action, t11Action, t12Action, t13Action, t14Action, t15Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func, Func<T9, TReturn> t9Func, Func<T10, TReturn> t10Func, Func<T11, TReturn> t11Func, Func<T12, TReturn> t12Func, Func<T13, TReturn> t13Func, Func<T14, TReturn> t14Func, Func<T15, TReturn> t15Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func, t9Func, t10Func, t11Func, t12Func, t13Func, t14Func, t15Func));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> visitable, I15x1Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> visitor, IVisitable<T16> secondVisitable) => secondVisitable.Accept(outer => visitable.Accept(inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer), inner => visitor.Visit(inner, outer)));
        #endregion
        

        #region T = 16
        public static void Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> visitable, Action<T1> t1Action, Action<T2> t2Action, Action<T3> t3Action, Action<T4> t4Action, Action<T5> t5Action, Action<T6> t6Action, Action<T7> t7Action, Action<T8> t8Action, Action<T9> t9Action, Action<T10> t10Action, Action<T11> t11Action, Action<T12> t12Action, Action<T13> t13Action, Action<T14> t14Action, Action<T15> t15Action, Action<T16> t16Action) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Create(t1Action, t2Action, t3Action, t4Action, t5Action, t6Action, t7Action, t8Action, t9Action, t10Action, t11Action, t12Action, t13Action, t14Action, t15Action, t16Action));
        public static TReturn Accept<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>(this IVisitable<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> visitable, Func<T1, TReturn> t1Func, Func<T2, TReturn> t2Func, Func<T3, TReturn> t3Func, Func<T4, TReturn> t4Func, Func<T5, TReturn> t5Func, Func<T6, TReturn> t6Func, Func<T7, TReturn> t7Func, Func<T8, TReturn> t8Func, Func<T9, TReturn> t9Func, Func<T10, TReturn> t10Func, Func<T11, TReturn> t11Func, Func<T12, TReturn> t12Func, Func<T13, TReturn> t13Func, Func<T14, TReturn> t14Func, Func<T15, TReturn> t15Func, Func<T16, TReturn> t16Func) => visitable.Accept(Visitor<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>.Create(t1Func, t2Func, t3Func, t4Func, t5Func, t6Func, t7Func, t8Func, t9Func, t10Func, t11Func, t12Func, t13Func, t14Func, t15Func, t16Func));
        #endregion
        

    }
}
